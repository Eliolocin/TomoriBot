services:
  # TomoriBot's PostgreSQL database - her private storage room
  postgres:
    build:
      context: .
      dockerfile: docker/postgres.Dockerfile
    container_name: tomoribot-db
    env_file: .env
    environment:
      # Hard-coded for Docker - users don't need to configure these
      POSTGRES_DB: tomodb
      POSTGRES_USER: tomori
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_default_password}
    command: >
      postgres
      -c shared_preload_libraries=pg_cron
      -c cron.database_name=tomodb
    volumes:
      # Persistent storage - data survives container restarts
      - postgres_data:/var/lib/postgresql/data
      # Initialize pg_cron extension on container startup
      - ./docker/init-pgcron.sql:/docker-entrypoint-initdb.d/init-pgcron.sql:ro
    ports:
      # Only expose internally - not accessible from outside Docker network
      - "15432:5432"  # Expose on port 5433 to avoid conflict with your Windows PostgreSQL
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tomori -d tomodb"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - tomori-network
    # Note: Standard PostgreSQL Alpine image doesn't include pg_cron extension
    # For production with pg_cron support, consider:
    # - Using postgres:15 (non-alpine) with pg_cron installed via dockerfile
    # - Using a managed database service with pg_cron support
    # - TomoriBot includes app-level cooldown cleanup as fallback

  # TomoriBot application - the main apartment
  tomoribot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tomoribot-app
    depends_on:
      postgres:
        condition: service_healthy
    env_file: .env
    environment:
      # Hard-coded Docker-specific database connection
      POSTGRES_URL: postgresql://tomori:${POSTGRES_PASSWORD:-secure_default_password}@postgres:5432/tomodb
      NODE_ENV: production
    restart: unless-stopped
    networks:
      - tomori-network
    # Optional: Mount logs directory for debugging
    volumes:
      - ./logs:/app/logs:rw

# Named volumes for persistent data
volumes:
  postgres_data:
    driver: local

# Private network for TomoriBot's services
networks:
  tomori-network:
    driver: bridge