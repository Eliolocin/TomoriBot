name: Deploy TomoriBot
on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Manual trigger

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create environment file
        run: |
          echo "üîê Creating environment file from secrets..."
          $envContent = @"
          DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}
          CRYPTO_SECRET=${{ secrets.CRYPTO_SECRET }}
          POSTGRES_HOST=postgres
          POSTGRES_PORT=5432
          POSTGRES_USER=tomori
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=tomodb

          DEFAULT_BOTNAME=Tomori
          DEFAULT_BOTNAME_JP=„Å®„ÇÇ„Çä
          BASE_TRIGGER_WORDS=tomori,tomo,„Éà„É¢„É™,„Å®„ÇÇ„Çä
          RUN_ENV=production

          GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
          DEEPL_KEY=${{ secrets.DEEPL_KEY }}

          DEFAULT_GEMINI_MODEL=gemini-2.5-flash-preview-05-20
          DEFAULT_GEMINI_SUBAGENT_MODEL=gemini-2.5-flash-preview-05-20
          STREAMING_ENABLED=true
          PREFIX==

          GENCH_ID=877047848330465294
          DEV_ID=684462114022490125
          TESTSRV_ID=877047847214792705
          TESTCH_ID=1135045786699309056
          TOMORI_ID=841644102059556915
          TOMORI_DMS=1112155828263338024
          STRING_FOR_DEV=development
          HAVENSRV_ID=1040174444074782802
          "@
          [System.IO.File]::WriteAllText("$PWD\.env", $envContent, [System.Text.Encoding]::UTF8)
      
      - name: Debug environment file
        run: |
          echo "üìã Environment file contents:"
          Get-Content .env
          echo "üìã POSTGRES_PASSWORD specifically:"
          Get-Content .env | Select-String "POSTGRES_PASSWORD"
          
      - name: Stop ALL TomoriBot containers globally
        run: |
          echo "üõë Stopping ALL TomoriBot containers..."
          # Stop by container name (global approach)
          docker stop tomoribot-app tomoribot-db 2>$null || echo "Containers already stopped"
          docker rm tomoribot-app tomoribot-db 2>$null || echo "Containers already removed"
          
          # Remove networks
          docker network rm tomoribot_tomori-network 2>$null || echo "Network already removed"
          
          # Clean up any orphaned resources
          docker system prune -f --volumes
        continue-on-error: true
        
      - name: Wait for Docker cleanup
        run: Start-Sleep 10
        
      - name: Build and start new containers
        run: |
          echo "üèóÔ∏è Building and starting new TomoriBot..."
          docker-compose up -d --build --force-recreate
          
      - name: Verify deployment
        run: |
          echo "‚úÖ Verifying TomoriBot is running..."
          Start-Sleep 90
          $containers = docker ps --filter "name=tomoribot" --format "table {{.Names}}\t{{.Status}}"
          echo $containers
          
          # Check if both containers are running
          if ((docker ps --filter "name=tomoribot-app" --filter "status=running" -q) -and 
              (docker ps --filter "name=tomoribot-db" --filter "status=running" -q)) {
            echo "üéâ TomoriBot deployment successful!"
          } else {
            echo "‚ùå TomoriBot deployment failed!"
            exit 1
          }
          
      - name: Discord notification
        if: always()
        run: |
          if ($LASTEXITCODE -eq 0) {
            echo "‚úÖ Would send success notification to Discord"
          } else {
            echo "‚ùå Would send failure notification to Discord"
          }